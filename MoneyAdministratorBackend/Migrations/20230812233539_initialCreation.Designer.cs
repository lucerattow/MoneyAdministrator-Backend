// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoneyAdministratorBackend.Data;

#nullable disable

namespace MoneyAdministratorBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230812233539_initialCreation")]
    partial class initialCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MoneyAdministratorBackend.Models.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreditCardBrandId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("LastFourNumbers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditCardBrandId");

                    b.HasIndex("EntityId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.CreditCardBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("CreditCardBrands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Visa"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MasterCard"
                        });
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.CreditCardSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreditCardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateExpiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateNext")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateNextExpiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Imported")
                        .HasColumnType("bit");

                    b.Property<decimal>("MinimumPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Period")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalArs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalUsd")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionPayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditCardId");

                    b.HasIndex("TransactionId");

                    b.ToTable("CreditCardSummaries");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.CreditCardSummaryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountArs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountUsd")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreditCardSummaryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Installments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditCardSummaryId");

                    b.ToTable("CreditCardSummaryDetails");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ARS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "USD"
                        });
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.CurrencyValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CurrencyValues");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.EntityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("EntityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Name = "General"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Name = "Banco"
                        });
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EntityId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.TransactionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Concider")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionDetails");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.CreditCard", b =>
                {
                    b.HasOne("MoneyAdministratorBackend.Models.CreditCardBrand", "CreditCardBrand")
                        .WithMany("CreditCards")
                        .HasForeignKey("CreditCardBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyAdministratorBackend.Models.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditCardBrand");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.CreditCardSummary", b =>
                {
                    b.HasOne("MoneyAdministratorBackend.Models.CreditCard", "CreditCard")
                        .WithMany("CreditCardSumaries")
                        .HasForeignKey("CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyAdministratorBackend.Models.Transaction", "Transaction")
                        .WithMany("CreditCardSummaries")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreditCard");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.CreditCardSummaryDetail", b =>
                {
                    b.HasOne("MoneyAdministratorBackend.Models.CreditCardSummary", "CreditCardSummary")
                        .WithMany("CreditCardSummaryDetails")
                        .HasForeignKey("CreditCardSummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditCardSummary");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.CurrencyValue", b =>
                {
                    b.HasOne("MoneyAdministratorBackend.Models.Currency", "Currency")
                        .WithMany("CurrencyValues")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.Entity", b =>
                {
                    b.HasOne("MoneyAdministratorBackend.Models.EntityType", "EntityType")
                        .WithMany("Entities")
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityType");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.Salary", b =>
                {
                    b.HasOne("MoneyAdministratorBackend.Models.Currency", "Currency")
                        .WithMany("Salaries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.Transaction", b =>
                {
                    b.HasOne("MoneyAdministratorBackend.Models.Currency", "Currency")
                        .WithMany("Transactions")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyAdministratorBackend.Models.Entity", "Entity")
                        .WithMany("Transactions")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.TransactionDetail", b =>
                {
                    b.HasOne("MoneyAdministratorBackend.Models.Transaction", "Transaction")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.CreditCard", b =>
                {
                    b.Navigation("CreditCardSumaries");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.CreditCardBrand", b =>
                {
                    b.Navigation("CreditCards");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.CreditCardSummary", b =>
                {
                    b.Navigation("CreditCardSummaryDetails");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.Currency", b =>
                {
                    b.Navigation("CurrencyValues");

                    b.Navigation("Salaries");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.Entity", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.EntityType", b =>
                {
                    b.Navigation("Entities");
                });

            modelBuilder.Entity("MoneyAdministratorBackend.Models.Transaction", b =>
                {
                    b.Navigation("CreditCardSummaries");

                    b.Navigation("TransactionDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
